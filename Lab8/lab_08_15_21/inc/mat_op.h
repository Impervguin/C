#ifndef MAT_OP_H__
#define MAT_OP_H__

#include <stddef.h>
/**
 * @brief Функция, которая стандартно складывает 2 матрицы, при этом сумма исходных матриц создается динамически внутри функции.
 * Результирующая матрица задается в виде массива указателей нас строки, при этом строки матрицы находятсяв памяти непрерывно.
 * @param mat1 - Первая матрица в виде массива указателей на строки матрицы.
 * @param mat2 - Вторая матрица в виде массива указателей на строки матрицы.
 * @param row - Количество строк матриц.
 * @param col - Количество столбцов матриц.
 * @return double** - Результирующую матрицу. Если память выделить не удалось, возвращается нуль то NULL.
 */
double **add_matrix(double **mat1, double **mat2, size_t row, size_t col);

/**
 * @brief Функция,которая стандартно перемножает две матрицы, при это произведение исходных создается динамически внутри функции.
 * Результирующая матрица задается в виде массива указателей нас строки, при этом строки матрицы находятсяв памяти непрерывно.
 * @param mat1 - Первая матрица в виде массива указателей на строки матрицы.
 * @param row1 - Количество строк первой матрицы.
 * @param col1 - Количество столбцов первой матрицы. 
 * @param mat2 - Вторая матрица в виде массива указателей на строки матрицы.
 * @param row2 - Количество строк второй матрицы.
 * @param col2 - Количество столбцов второй матрицы. 
 * @param res_row - Указатель на количество строк результирующей матрицы. 
 * @param res_col - Указатель на количество столбцов результирующей матрицы. 
 * @return double** - Указатель на результирующую матрицу. Если не удалось выделить память, или размеры матриц не подходят для умножения, то NULL.
 */
double **mult_matrix(double **mat1, size_t row1, size_t col1, double **mat2, size_t row2, size_t col2, size_t *res_row, size_t *res_col);

/**
 * @brief Фунция для поиска обратной матрицы.
 * Результирующая матрица задается в виде массива указателей нас строки, при этом строки матрицы находятсяв памяти непрерывно.
 * @param mat - Исходная матрица в виде массива указателей на строки матрицы.
 * @param res - Указатель на результирующую матрицу.
 * @param size - Размер матриц.
 * @return int - Код возврата.
 */
int inv_matrix(double **mat, double ***res, size_t size);

/**
 * @brief Функция для умножения строки матрицы на число.
 * 
 * @param mat - Матрица в виде массива указателей на строки матрицы.
 * @param row - Индекс строка, которую нужно умножить на число.
 * @param cols - Количество столбцов в матрице.
 * @param mult - Множитель
 */
void mult_row(double **mat, size_t row, size_t cols, double mult);

/**
 * @brief Функция для вычитания одной строки, умноженной на число, матрицы из другой.
 * 
 * @param mat - Матрица в виде массива указателей на строки матрицы.
 * @param row_src - Индекс строки, которую вычитают.
 * @param row_dst - Индекс строки, из которой вычитают.
 * @param cols - Количество столбцов.
 * @param mult - Множитель строки.
 */
void sub_matrix_rows(double **mat, size_t row_src, size_t row_dst, size_t cols, double mult);

/**
 * @brief Функция для смены строк матрицы местами.
 * 
 * @param mat - Матрица в виде массива указателей на строки матрицы.
 * @param row1 - Индекс первой строки.
 * @param row2 - Индекс второй строки.
 */
void swap_rows(double **mat, size_t row1, size_t row2);

/**
 * @brief Функция для смены мест столбцов матрицы.
 * 
 * @param mat - Матрица в виде массива указателей на строки матрицы.
 * @param rows - Количество строк матрицы.
 * @param col1 - Индекс первого столбца.
 * @param col2 - Индекс второго столбца.
 */
void swap_cols(double **mat, size_t rows, size_t col1, size_t col2);

/**
 * @brief Функция для проверки нуля у double с точностью EPS.
 * 
 * @param a - Вещественное число.
 * @return int - 0 - число равно нулю, 1 - не равно нулю.
 */
int check_double_null(double a);

#endif
